import os
from http.client import HTTPException
from typing import Union, List
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import (
    ChatType, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
    KeyboardButton, ReplyKeyboardMarkup, ParseMode, ContentType, WebAppInfo, InputFile
)
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import asyncpg
from datetime import datetime, timedelta

from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import FileIsTooBig
from aiogram.utils.markdown import escape_md
from pydantic import BaseModel
from telethon import TelegramClient
import asyncio
from fastapi import FastAPI
from uvicorn import Config, Server

app = FastAPI()

API_TOKEN = '7236806586:AAEyzDi_99Y6YKhyG5ZGPCBWSMAVlkrt7VI'

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

db_pool = None

api_id = '24463380'
api_hash = '2d943e94d362db2be40612c00019e381'
phone_number = '+8562057532284'

client = TelegramClient('session_name', api_id, api_hash)

class OrderState(StatesGroup):
    waiting_for_advertisement = State()

def nano_ton_to_ton(nano_ton):
    """
    Converts nanoTon to TON.

    :param nano_ton: The amount in nanoTon (int, float, or str).
    :return: The equivalent amount in TON (float).
    """
    if isinstance(nano_ton, str):
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
        nano_ton = float(nano_ton.replace(" ", ""))
    return nano_ton / 1_000_000_000


def ton_to_nano_ton(ton):
    """
    Converts TON to nanoTon.

    :param ton: The amount in TON (int, float, or str).
    :return: The equivalent amount in nanoTon (float).
    """
    if isinstance(ton, str):
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
        ton = float(ton.replace(" ", ""))
    return ton * 1_000_000_000



async def create_db_pool():
    global db_pool
    try:
        db_pool = await asyncpg.create_pool(
            user=os.getenv('DB_USER', 'postgres'),
            password=os.getenv('DB_PASSWORD', 'Stepan110104'),
            database=os.getenv('DB_NAME', 'TeleAdMarket'),
            host=os.getenv('DB_HOST', 'localhost'),
            port=os.getenv('DB_PORT', '5432'),
            min_size=1,
            max_size=10
        )
        logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

@dp.message_handler(content_types=types.ContentType.VIDEO)
async def get_video_id(message: types.Message):
    await message.answer(message.video.file_id)  # –í—ã–≤–µ–¥–µ—Ç –Ω–æ–≤—ã–π file_id –≤ –∫–æ–Ω—Å–æ–ª—å


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id

    inline_keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ë–∏—Ä–∂–∞", web_app=types.WebAppInfo(url="https://marusinohome.ru"))  # –ó–∞–º–µ–Ω–∏ —Å—Å—ã–ª–∫—É
    )

    # async with db_pool.acquire() as connection:
    #     user = await connection.fetchrow(
    #         "SELECT user_uuid FROM users WHERE user_id = $1", user_id
    #     )
    #
    #     if user:
    #         user_uuid = user['user_uuid']
    #         photos = await bot.get_user_profile_photos(user_id)
    #
    #         if photos.total_count > 0:
    #             file_id = photos.photos[0][0].file_id
    #             file = await bot.get_file(file_id)
    #             file_path = file.file_path
    #
    #             save_path = f'static/user_{user_uuid}.png'
    #
    #             if not os.path.exists('static'):
    #                 os.makedirs('static')
    #
    #             await bot.download_file(file_path, save_path)
    #
    #     else:
    #         await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")

    button_orders = KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å')
    button_ads = KeyboardButton('–†–µ–∫–ª–∞–º—ã')
    button_applications = KeyboardButton('–ó–∞–∫–∞–∑—ã –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ')
    button_verified = KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª')
    button_my_channels = KeyboardButton('–ú–æ–∏ –∫–∞–Ω–∞–ª—ã')
    button_support = KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞')

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(button_orders, button_ads, button_applications, button_verified, button_my_channels, button_support)

    text = (
        "<b>üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–∏—Ä–∂—É —Ä–µ–∫–ª–∞–º—ã <a>@Carrot</a></b>\n\n"
        "üíº –ü–æ–∫—É–ø–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º—É –≤ <b>–æ–¥–∏–Ω –∫–ª–∏–∫!</b>\n"
        "üí∞ –†–µ–∑–µ—Ä–≤ —Å—Ä–µ–¥—Å—Ç–≤ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Äì <b>–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–¥–µ–ª–∫–∞</b>.\n"
        "üì¢ –ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º—É –≤ —Å–≤–æ–∏—Ö Telegram-–∫–∞–Ω–∞–ª–∞—Ö –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ.\n"
        "üíé –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ TON –Ω–∞ —Å–≤–æ–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø—Ä—è–º–æ –≤ Telegram!\n\n"
        "<b>üìä –ë—ã—Å—Ç—Ä–æ. –£–¥–æ–±–Ω–æ. –ù–∞–¥–µ–∂–Ω–æ.</b>"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é (Reply) –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥ –≤–∏–¥–µ–æ
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å Inline-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer_video(
        'BAACAgIAAxkBAAM0Z6XHGstjH-WLiyov3KQmWEt9mCIAAtpjAAI01DBJe9Dkz7pjxKU2BA',
        caption=text,
        reply_markup=inline_keyboard,
        parse_mode="HTML"
    )

@dp.message_handler(commands=["menu"])
async def menu_handler(message: types.Message):
    user_id = message.from_user.id

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"üë§ <b>–ò–º—è:</b> Strep\n"
        # f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> 10 TON\n"
        f"üìÜ <b>–°—Ç–∞–∂:</b> 5 –º–µ—Å—è—Ü–µ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    # Inline-–∫–Ω–æ–ø–∫–∏ 4 –∫–Ω–æ–ø–∫–∏, –ø–æ 2 –≤ —Ä—è–¥
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üì¢ –†–µ–∫–ª–∞–º—ã", callback_data="ads"),
            types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        ],
        [
            types.InlineKeyboardButton(text="üì° –ö–∞–Ω–∞–ª—ã", callback_data="channels"),
            types.InlineKeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
        ]
    ])

    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")



# @dp.message_handler(commands=['myProfile'])
# async def send_welcome(message: types.Message):
#     user_id = message.from_user.id
#
#     pay_button = InlineKeyboardMarkup().add(
#         InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", web_app=WebAppInfo(url=f"https://tma.internal/user/4526c40d-3bb8-45ac-af4f-d751e64aceb3"))
#     )
#
#     await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é: —Ç—É—Ç(https://t.me/TeleAdMarketBot/tma.internal/user/4526c40d-3bb8-45ac-af4f-d751e64aceb3)", reply_markup=pay_button)



@dp.message_handler(lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def user_profile(message: types.Message):
    user_id = message.from_user.id

    try:
        async with db_pool.acquire() as connection:
            user = await connection.fetchrow(
                "SELECT * FROM users WHERE user_id = $1", user_id
            )

        if user:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            response = (
                f"üë§ <b>–ò–º—è:</b> {user['username']}\n"
                f"üÜî <b>User ID:</b> {user['user_id']}\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> 10 TON\n"
                f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user['created_at'].strftime('%d.%m.%Y')}\n"
                f"üõ† <b>–°—Ç–∞—Ç—É—Å:</b> {user['rating']}\n"
            )

            # –°–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫—É "–°–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ"
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üñº –°–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="change_photo")]
            ])

            await message.answer(response, reply_markup=keyboard, parse_mode="HTML")
        else:
            await message.answer("üö® –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.")

@dp.callback_query_handler(lambda callback_query: callback_query.data == "change_photo")
async def my_orders(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    try:
        async with db_pool.acquire() as connection:
            user = await connection.fetchrow(
                "SELECT user_uuid FROM users WHERE user_id = $1", user_id
            )

        if user:
            user_uuid = user['user_uuid']
            photos = await bot.get_user_profile_photos(user_id)

            if photos.total_count > 0:
                file_id = photos.photos[0][0].file_id
                file = await bot.get_file(file_id)
                file_path = file.file_path

                save_directory = 'static'
                if not os.path.exists(save_directory):
                    os.makedirs(save_directory)

                save_path = os.path.join(save_directory, f'user_{user_uuid}.png')

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if os.path.exists(save_path):
                    os.remove(save_path)

                # –°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                await bot.download_file(file_path, save_path)

                await callback_query.message.answer("‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            else:
                await callback_query.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
        else:
            await callback_query.message.answer("üö® –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
    except FileIsTooBig:
        await callback_query.message.answer("‚ùå –í–∞—à–µ —Ñ–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–æ—Ç–æ: {e}")
        await callback_query.message.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–æ—Ç–æ.")

@dp.message_handler(lambda message: message.text == "–†–µ–∫–ª–∞–º—ã")
async def ads_menu(message: types.Message):
    # –°–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫–∏
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders"),
            types.InlineKeyboardButton(text="üì¢ –ú–æ–∏ —Ä–µ–∫–ª–∞–º—ã", callback_data="my_ads"),
        ]
    ])

    await message.answer("üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.callback_query_handler(lambda callback_query: callback_query.data == "my_orders")
async def my_orders(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        async with db_pool.acquire() as connection:
            orders = await connection.fetch(
                """SELECT o.order_id, o.total_price, o.status, o.created_at
                   FROM Orders o WHERE o.user_id = $1 AND status = 'waiting'
                   ORDER BY o.created_at DESC""", user_id
            )

            if orders:
                response = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:"
                keyboard = InlineKeyboardMarkup()
                for order in orders:
                    formatted_price = f"{order['total_price']:,.0f}".replace(",", " ")
                    button_text = f"–ó–∞–∫–∞–∑ ‚Ññ{order['order_id']} - {nano_ton_to_ton(formatted_price)}ton."
                    callback_data = f"order_{order['order_id']}"
                    keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))

                await callback_query.message.answer(response, reply_markup=keyboard)
            else:
                await callback_query.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")

@dp.callback_query_handler(lambda callback_query: callback_query.data == "my_ads")
async def my_orders(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        async with db_pool.acquire() as connection:
            ads = await connection.fetch(
                """SELECT DISTINCT o.user_id, o.order_id, p.product_id, total_price ,p.title FROM orders AS o
                JOIN orderitems oi ON o.order_id = oi.order_id
                JOIN products p ON p.product_id = oi.product_id
                WHERE o.user_id = $1 AND o.status = 'paid'
                ORDER BY o.order_id desc""", user_id
            )

            if ads:
                response = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:"
                keyboard = InlineKeyboardMarkup()
                for order in ads:
                    formatted_price = f"{order['total_price']:,.0f}".replace(",", " ")
                    button_text = f"–ó–∞–∫–∞–∑ ‚Ññ{order['order_id']} - {nano_ton_to_ton(formatted_price)} ton."
                    callback_data = f"ad_{order['order_id']}"
                    keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))

                await callback_query.message.answer(response, reply_markup=keyboard)
            else:
                await callback_query.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("ad_"))
async def ad_details(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        order_id = int(callback_query.data.split("_")[1])
        async with db_pool.acquire() as connection:
            ad_details = await connection.fetchrow(
                """
                SELECT o.user_id, o.order_id, o.total_price, array_agg(oi.post_time) AS post_times, 
                       oi.message_id, p.product_id, p.title, p.post_time, pf.format_name 
                FROM orders AS o
                JOIN orderitems oi ON o.order_id = oi.order_id
                JOIN products p ON p.product_id = oi.product_id
                JOIN publication_formats pf ON oi.format = pf.format_id
                WHERE o.order_id = $1
                GROUP BY 
                    o.user_id, 
                    o.order_id, 
                    o.total_price, 
                    oi.message_id, 
                    p.product_id, 
                    p.title, 
                    p.post_time, 
                    pf.format_name;
                """,
                order_id
            )

            if ad_details:
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ datetime –≤ —Å—Ç—Ä–æ–∫–∏
                post_times = (
                    ", ".join(post_time.strftime("%Y-%m-%d %H:%M:%S") for post_time in ad_details['post_times'])
                    if ad_details['post_times']
                    else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                )
                price = nano_ton_to_ton(ad_details['total_price'])
                response = (
                    f"**–î–µ—Ç–∞–ª–∏ —Ä–µ–∫–ª–∞–º—ã ‚Ññ{escape_md(str(ad_details['order_id']))}**\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {escape_md(ad_details['title'])}\n"
                    f"–û–±—â–∞—è —Ü–µ–Ω–∞: {price:.2f} TON\n"
                    f"–í—Ä–µ–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞: {escape_md(post_times)}\n"
                    f"–§–æ—Ä–º–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {escape_md(ad_details['format_name'])}\n"
                    f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {escape_md(str(ad_details['message_id']))}\n"
                    f"ID –ø—Ä–æ–¥—É–∫—Ç–∞: {escape_md(str(ad_details['product_id']))}\n"
                )
                # –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å—Ç"
                keyboard = InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        text="–ü–æ—Å—Ç",
                        callback_data=f"post_{ad_details['message_id']}"
                    ),InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", web_app=WebAppInfo(url="https://marusinohome.ru/profile/history/{order_id}")),
                        # InlineKeyboardButton("–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"adnotdone_{ad_details['order_id']}")
                )
                await callback_query.message.edit_text(response, parse_mode="Markdown", reply_markup=keyboard)
            else:
                await callback_query.message.edit_text("–î–µ—Ç–∞–ª–∏ —Ä–µ–∫–ª–∞–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∫–ª–∞–º—ã: {e}")
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∫–ª–∞–º—ã.")

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("post_"))
async def post_ad(callback_query: CallbackQuery):
    try:
        message_id = int(callback_query.data.split("_")[1])
        chat_id = callback_query.message.chat.id  # ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞

        await callback_query.bot.copy_message(
            chat_id=chat_id,
            from_chat_id=chat_id,
            message_id=message_id
        )
        # await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)

@dp.callback_query_handler(lambda call: call.data.startswith("addone_") or call.data.startswith("adnotdone_"))
async def ad_confirmation_handler(call: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ä–µ–∫–ª–∞–º—ã
        ad_id = int(call.data.split('_')[1])

        async with db_pool.acquire() as connection:
            if call.data.startswith('addone_'):
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "completed"
                await connection.execute(
                    """
                    UPDATE orders 
                    SET status = 'completed' 
                    WHERE order_id = $1
                    """,
                    ad_id
                )
                await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await call.message.answer(f"–†–µ–∫–ª–∞–º–∞ ‚Ññ{ad_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
            elif call.data.startswith('adnotdone_'):
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "problem"
                await connection.execute(
                    """
                    UPDATE orders 
                    SET status = 'problem' 
                    WHERE order_id = $1
                    """,
                    ad_id
                )
                await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await call.message.answer(f"–†–µ–∫–ª–∞–º–∞ ‚Ññ{ad_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        await call.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω.", show_alert=True)

    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö callback_data: {e}")
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.", show_alert=True)

@dp.message_handler(lambda message: message.text == "–ó–∞–∫–∞–∑—ã –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
async def seller_orders(message: types.Message):
    user_id = message.from_user.id
    try:
        async with db_pool.acquire() as connection:
            orders = await connection.fetch(
                """
                SELECT DISTINCT oi.order_item_id, oi.post_time, p.product_id, p.title 
                FROM orders AS o
                JOIN orderitems oi ON o.order_id = oi.order_id
                JOIN products p ON p.product_id = oi.product_id
                WHERE p.user_id = $1 AND o.status = 'paid'
                ORDER BY oi.order_item_id DESC
                """,
                user_id
            )

            if orders:
                response = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:"
                keyboard = InlineKeyboardMarkup()
                for order in orders:
                    button_text = f"–ó–∞–∫–∞–∑ ‚Ññ{order['order_item_id']} - {order['title']}"
                    callback_data = f"seller_order_{order['order_item_id']}"
                    keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))

                await message.answer(response, reply_markup=keyboard)
            else:
                await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("seller_order_"))
async def order_details(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        order_item_id = int(callback_query.data.split("_")[2])  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞–∫–∞–∑–∞
        async with db_pool.acquire() as connection:
            order_details = await connection.fetchrow(
                """
                SELECT o.user_id, oi.order_id, oi.post_time, oi.message_id, oi.chat_id,
                       p.product_id, p.title, pf.format_name
                FROM orders AS o
                JOIN orderitems oi ON o.order_id = oi.order_id
                JOIN products p ON p.product_id = oi.product_id
                JOIN publication_formats pf ON oi.format = pf.format_id
                WHERE oi.order_item_id = $1
                """,
                order_item_id
            )

            if not order_details:
                await callback_query.message.edit_text("–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            post_time = (
                order_details['post_time'].strftime("%Y-%m-%d %H:%M:%S")
                if order_details['post_time']
                else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            )
            response = (
                f"**–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Ññ{order_details['order_id']}**\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {order_details['title']}\n"
                f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {post_time}\n"
                f"–§–æ—Ä–º–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {order_details['format_name']}\n"
                f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {order_details['message_id']}\n"
                f"ID –ø—Ä–æ–¥—É–∫—Ç–∞: {order_details['product_id']}\n"
            )
            # –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å—Ç" —Å –ø–µ—Ä–µ–¥–∞—á–µ–π message_id –∏ chat_id
            callback_data = f"adpost_{order_details['message_id']}_{order_details['chat_id']}"
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton(text="–ü–æ—Å—Ç", callback_data=callback_data)
            )
            await callback_query.message.edit_text(response, parse_mode="Markdown", reply_markup=keyboard)
    except ValueError as e:
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback_data: {e}")
        await callback_query.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.")

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("adpost_"))
async def post_ad(callback_query: CallbackQuery):
    try:
        data = callback_query.data.split("_")
        print(data)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤ callback_data –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if len(data) != 3:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ callback_data.")

        message_id = int(data[1])  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ message_id
        chat_id = int(data[2])  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ chat_id (—á–∞—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞)
        current_chat_id = callback_query.message.chat.id  # –¢–µ–∫—É—â–∏–π —á–∞—Ç

        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback_query.bot.copy_message(
            chat_id=current_chat_id,  # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            from_chat_id=chat_id,  # –ß–∞—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞
            message_id=message_id  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
        )
        # await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ!", show_alert=True)
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö callback_data: {e}")
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)

@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def add_channel(message: types.Message):
    try:
        add_bot_button = InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª",
                url="https://t.me/TeleAdMarketBot?startgroup=true"
            )
        )
        await message.answer(
            "–ß—Ç–æ–±—ã –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∫–∞–Ω–∞–ª, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞. "
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞.",
            reply_markup=add_bot_button
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")

@dp.my_chat_member_handler()
async def on_bot_added_to_channel(my_chat_member: types.ChatMemberUpdated):
    if my_chat_member.chat.type == ChatType.CHANNEL and my_chat_member.new_chat_member.status == "administrator":
        try:
            chat_info = await bot.get_chat(my_chat_member.chat.id)

            async with db_pool.acquire() as connection:
                channel_exists = await connection.fetchval(
                    "SELECT EXISTS(SELECT 1 FROM verifiedchannels WHERE channel_tg_id = $1)", chat_info.id
                )

            if channel_exists:
                await bot.send_message(
                    chat_id=my_chat_member.from_user.id,
                    text="–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."
                )
                return

            subscribers_count = await bot.get_chat_members_count(my_chat_member.chat.id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            if subscribers_count <= 0:
                await bot.send_message(
                    chat_id=my_chat_member.from_user.id,
                    text="–ö–∞–Ω–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 1000."
                )
                return

            file_path = await download_channel_photo(bot, my_chat_member.chat.id)
            if not file_path:
                file_path = "–ê–≤–∞—Ç–∞—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

            administrators = await bot.get_chat_administrators(my_chat_member.chat.id)
            owner_id = None
            for admin in administrators:
                if admin.status == 'creator':
                    owner_id = admin.user.id
                    break

            if owner_id:
                channel_title = chat_info.title
                channel_id = chat_info.id
                channel_username = chat_info.username or "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                channel_description = chat_info.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"

                await bot.send_message(
                    chat_id=owner_id,
                    text=(f"–ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª:\n"
                          f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {channel_title}\n"
                          f"ID –∫–∞–Ω–∞–ª–∞: {channel_id}\n"
                          f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–∞: {channel_username}\n"
                          f"–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {channel_description}\n"
                          f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count}\n"
                          f"–í–∞—à user_id: {owner_id}\n")
                )

                channel_url = f"https://t.me/{channel_username}"

                async with db_pool.acquire() as connection:
                    await connection.execute(
                        """INSERT INTO verifiedchannels(user_id, channel_name, channel_title, 
                           channel_url, subscribers_count, channel_tg_id)
                           VALUES ($1, $2, $3, $4, $5, $6)
                           ON CONFLICT (channel_tg_id) DO NOTHING""",
                        owner_id, channel_username, channel_title, channel_url, subscribers_count, channel_id
                    )

                await bot.send_message(
                    chat_id=owner_id,
                    text="–í–∞—à –∫–∞–Ω–∞–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."
                )
            else:
                await bot.send_message(
                    chat_id=my_chat_member.from_user.id,
                    text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞."
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
            await bot.send_message(
                chat_id=my_chat_member.from_user.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ."
            )

# –•–µ–Ω–¥–ª–µ—Ä: –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º callback_data
@dp.message_handler(lambda message: message.text == "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã")
async def my_channels(message: types.Message):
    user_id = message.from_user.id
    try:
        async with db_pool.acquire() as connection:
            channels = await connection.fetch(
                """SELECT channel_id, channel_name, channel_url, channel_tg_id
                   FROM verifiedchannels 
                   WHERE user_id = $1 ORDER BY created_at DESC""", user_id
            )

            if channels:
                keyboard = InlineKeyboardMarkup(row_width=1)

                for channel in channels:
                    channel_tg_id = channel['channel_tg_id']
                    channel_name = channel['channel_name']

                    button = InlineKeyboardButton(
                        text=channel_name,
                        callback_data=f"channel_{channel_tg_id}"
                    )
                    keyboard.add(button)

                await message.answer("<b>–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>", parse_mode="HTML", reply_markup=keyboard)
            else:
                await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.", parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤.", parse_mode="HTML")

# –•–µ–Ω–¥–ª–µ—Ä: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∫–∞–Ω–∞–ª–æ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–°–º–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏"
@dp.callback_query_handler(lambda call: call.data.startswith("channel_"))
async def channel_selected(call: types.CallbackQuery):
    channel_tg_id = call.data.split("_")[1]

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text="–°–º–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏",
            callback_data=f"change_photo_{channel_tg_id}"
        )
    )

    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–∞–ª {channel_tg_id}.", reply_markup=keyboard)
    await call.answer()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞
async def download_channel_photo(bot: Bot, channel_tg_id: str):
    try:
        chat = await bot.get_chat(channel_tg_id)
        if chat.photo:
            file = await bot.get_file(chat.photo.big_file_id)
            file_path = file.file_path

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            save_directory = 'static'
            os.makedirs(save_directory, exist_ok=True)

            save_path = os.path.join(save_directory, f'channel_{channel_tg_id}.png')

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(save_path):
                os.remove(save_path)

            # –°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            await bot.download_file(file_path, save_path)

            return save_path  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        else:
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ –∫–∞–Ω–∞–ª–∞ {channel_tg_id}: {e}")
        return None


# –•–µ–Ω–¥–ª–µ—Ä: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ "–°–º–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏"
@dp.callback_query_handler(lambda call: call.data.startswith("change_photo_"))
async def change_channel_photo(call: types.CallbackQuery):
    channel_tg_id = call.data.split("_")[2]

    # –°–∫–∞—á–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∫–∞–Ω–∞–ª–∞
    photo_path = await download_channel_photo(call.bot, channel_tg_id)

    if photo_path:
        await call.message.answer_photo(
            photo=InputFile(photo_path),
            caption="–§–æ—Ç–æ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"
        )
    else:
        await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –∫–∞–Ω–∞–ª–∞.")

    await call.answer()

@dp.callback_query_handler(lambda query: query.data.startswith("order_"))
async def process_order_callback(callback_query: types.CallbackQuery, state: FSMContext):
    order_id = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id

    try:
        async with db_pool.acquire() as connection:
            result = await connection.fetchrow(
                """SELECT p.user_id
                   FROM Products p
                   JOIN OrderItems oi ON oi.product_id = p.product_id
                   JOIN Orders o ON o.order_id = oi.order_id
                   WHERE o.order_id = $1""", order_id
            )

            if result:
                target_user_id = result['user_id']

                await callback_query.message.answer(
                    "–í–∞—à–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. "
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏."
                )

                await state.update_data(target_user_id=target_user_id, order_id=order_id)

                await OrderState.waiting_for_advertisement.set()
            else:
                await callback_query.message.answer("–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ user_id: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.")

@dp.message_handler(state=OrderState.waiting_for_advertisement, content_types=types.ContentType.ANY)
async def forward_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    order_id = data.get('order_id')

    if target_user_id and order_id:
        try:

            async with db_pool.acquire() as connection:
                await connection.execute(
                     """
                    UPDATE orderitems 
                    SET message_id = $1, chat_id = $2 
                    WHERE order_id = $3
                    """,
                    message.message_id,
                    message.chat.id,
                    order_id
                )

                order_info = await connection.fetch(
                    """SELECT oi.order_id, oi.post_time, oi.message_id, p.product_id, p.user_id, vc.channel_name, vc.channel_url, 
                              (oi.quantity * oi.price) AS total_price
                       FROM orderitems oi
                       JOIN products p ON oi.product_id = p.product_id
                       JOIN verifiedchannels vc ON p.channel_id = vc.channel_id
                       WHERE oi.order_id = $1""", order_id
                )

            if order_info:
                channel_name = order_info[0]['channel_name']
                channel_url = order_info[0]['channel_url']
                post_times = [record['post_time'] for record in order_info]  
                post_times_str = ", ".join([record['post_time'].strftime("%d-%m-%Y %H:%M") for record in order_info])
                total_prices = sum(record['total_price'] for record in order_info)
                formatted_total_price = f"{total_prices:,.0f}".replace(",", " ")

                async with db_pool.acquire() as connection:
                    existing_orders = await connection.fetch(
                        """
                        SELECT o.order_id 
                        FROM orders AS o
                        JOIN orderitems oi ON o.order_id = oi.order_id
                        WHERE oi.product_id = $1
                        AND oi.post_time = ANY($2)
                        AND o.status IN ('pending_payment', 'paid', 'complited', 'problem');;
                        """,
                        order_info[0]['product_id'],
                        post_times
                    )

                if len(existing_orders) > 1:
                    async with db_pool.acquire() as connection:
                        await connection.execute(
                            "UPDATE Orders SET status = 'problem' WHERE order_id = $1", order_id
                        )
                    await bot.send_message(
                        chat_id=message.from_user.id,
                        text="–ù–∞ –æ–¥–Ω—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç —É–∂–µ –∫—É–ø–∏–ª–∏ —Ä–µ–∫–ª–∞–º—É."
                    )
                    return

                keyboard = InlineKeyboardMarkup(row_width=2)
                keyboard.add(
                    InlineKeyboardButton("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å", callback_data=f"accept_{order_id}"),
                    InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{order_id}")
                )
                try:
                    await bot.forward_message(chat_id=order_info[0]['user_id'], from_chat_id=message.from_user.id, message_id=order_info[0]['message_id'])

                    await bot.send_message(
                    chat_id=target_user_id,
                    text=(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å —É –≤–∞—Å —Ä–µ–∫–ª–∞–º—É \n"
                        f"–≤ –∫–∞–Ω–∞–ª–µ <a href='{channel_url}'>{channel_name}</a> \n"
                        f"–Ω–∞ –¥–∞—Ç—ã: {post_times_str}. \n"
                        f"–ü–æ –æ–±—â–µ–π —Ü–µ–Ω–µ {nano_ton_to_ton(formatted_total_price)} ton."
                    ),
                    parse_mode="HTML",
                    reply_markup=keyboard
                    )   

                    await bot.send_message(
                    chat_id=message.from_user.id,
                    text="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É. –û–∂–∏–¥–∞–π—Ç–µ –µ–≥–æ –æ—Ç–≤–µ—Ç–∞."
                    )

                    async with db_pool.acquire() as connection:
                        await connection.execute(
                        "UPDATE Orders SET status = 'waiting' WHERE order_id = $1", order_id
                        )

                        await state.finish()

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            else:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")



@dp.callback_query_handler(lambda c: c.data and c.data.startswith('accept_'))
async def accept_ad(callback_query: CallbackQuery):
    order_id = int(callback_query.data.split('_')[1])

    try:
        async with db_pool.acquire() as connection:
            order_status = await connection.fetchval(
                "SELECT status FROM Orders WHERE order_id = $1", order_id
            )

            if order_status != "waiting":
                await bot.answer_callback_query(callback_query.id)
                await bot.send_message(
                    chat_id=callback_query.from_user.id,
                    text=f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ —Å—Ç–∞—Ç—É—Å: {order_status}."
                )
                return
                
            await connection.execute(
                "UPDATE Orders SET status = 'pending_payment' WHERE order_id = $1", order_id
            )

            order_info = await connection.fetchrow(
                """SELECT oi.order_id, vc.channel_name, vc.channel_url, o.user_id
                   FROM orderitems oi
                   JOIN products p ON oi.product_id = p.product_id
                   JOIN verifiedchannels vc ON p.channel_id = vc.channel_id
                   JOIN orders o ON oi.order_id = o.order_id
                   WHERE oi.order_id = $1""", order_id
            )

        if order_info:
            channel_name = order_info['channel_name']
            channel_url = order_info['channel_url']
            buyer_user_id = order_info['user_id']

            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(
                chat_id=callback_query.from_user.id,
                text=f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ó–∞–∫–∞–∑ —Å ID {order_id} –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã."
            )

            pay_button = InlineKeyboardMarkup().add(
                InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", web_app=WebAppInfo(url=f"https://tma.internal/buy/{order_id}"))
            )

            await bot.send_message(
                chat_id=buyer_user_id,
                text=(
                    f"–ü—Ä–æ–¥–∞–≤–µ—Ü –æ–¥–æ–±—Ä–∏–ª –≤–∞—à—É —Ä–µ–∫–ª–∞–º—É –≤ –∫–∞–Ω–∞–ª–µ "
                    f"<a href='{channel_url}'>{channel_name}</a>. "
                    f"–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑."
                ),
                parse_mode="HTML",
                reply_markup=pay_button
            )
        else:
            await bot.send_message(
                chat_id=callback_query.from_user.id,
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ."
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞."
        )

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('decline_'))
async def decline_ad(callback_query: CallbackQuery):
    order_id = int(callback_query.data.split('_')[1])

    try:
        async with db_pool.acquire() as connection:
            await connection.execute(
                "UPDATE Orders SET status = 'rejected' WHERE order_id = $1", order_id
            )

            buyer_user_id = await connection.fetchval(
                "SELECT user_id FROM orders WHERE order_id = $1", order_id
            )

            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(
                chat_id=callback_query.from_user.id,
                text=f"–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —Å ID {order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–û—Ç–º–µ–Ω–µ–Ω–æ'."
            )

            if buyer_user_id:
                await bot.send_message(
                    chat_id=buyer_user_id,
                    text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∑–∞–∫–∞–∑ —Å ID {order_id} –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–º."
                )
            else:
                logging.warning(f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è order_id: {order_id}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
        )

# @dp.message_handler(lambda message: message.text)
# async def forward_specified_message(message: types.Message, state: FSMContext):
#     data = await state.get_data()
#     specific_message_id = data.get('message_id')
#     user_id = message.from_user.id

#     if specific_message_id:
#         try:
#             await bot.forward_message(chat_id=user_id, from_chat_id=user_id, message_id=specific_message_id)
#         except Exception as e:
#             logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
#             await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
#     else:
#         await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π message_id.")

class OrderRequest(BaseModel):
    user_id: int
    order_id: int

@app.post('/order')
async def handle_order(order: OrderRequest):
    user_id = order.user_id
    order_id = order.order_id

    try:
        async with db_pool.acquire() as connection:
            result = await connection.fetchrow(
                """SELECT p.user_id
                   FROM Products p
                   JOIN OrderItems oi ON oi.product_id = p.product_id
                   JOIN Orders o ON o.order_id = oi.order_id
                   WHERE o.order_id = $1""", order_id
            )

        if result:
            target_user_id = result['user_id']

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(
                user_id,
                "‚úÖ –í–∞—à–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. "
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏."
            )

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSMContext —á–µ—Ä–µ–∑ dispatcher, –∞ –Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ FastAPI
            state = dp.current_state(user=user_id)
            await state.update_data(target_user_id=target_user_id, order_id=order_id)
            await state.set_state(OrderState.waiting_for_advertisement)

        else:
            await bot.send_message(user_id, "‚ùå –ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return {"status": "error", "message": "Order not found"}

        return {"status": "success", "message": "Message sent and data saved"}

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

class BuyRequest(BaseModel):
    user_id: int
    order_id: Union[int, None] = None
    message_id: Union[int, None] = None
    format: str
    post_time: Union[List[str], str]
    channel_name: str
    channel_url: str

@app.post('/buy')
async def handle_buy(data: BuyRequest):
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if isinstance(data.post_time, list):
            formatted_post_times = "\n".join([f"‚Ä¢ {time}" for time in data.post_time])
        else:
            formatted_post_times = data.post_time

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text_message = (
            f"üéâ –í–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ –±—ã–ª–∞ –∫—É–ø–ª–µ–Ω–∞!\n\n"
            f"üïí –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n{formatted_post_times}\n"
            f"üïí –§–æ—Ä–º–∞—Ç:\n{data.format}\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {data.channel_name}\n"
            f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {data.channel_url}\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(data.user_id, text_message, parse_mode=ParseMode.MARKDOWN)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if data.message_id:
            state = dp.current_state(user=data.user_id)
            await state.update_data(message_id=data.message_id)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {"status": "success", "message": "Message sent to seller", "message_id": data.message_id}

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def send_survey():
    async with db_pool.acquire() as connection:
        now = datetime.now()
        last_day = now - timedelta(days=1)
        print("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π —Å–¥–µ–ª–∫–∏:", now)

        results_now = await connection.fetch(
            """SELECT oi.order_id, oi.post_time, oi.product_id, p.user_id AS seller_id, 
                      o.user_id AS buyer_id, vc.channel_name, vc.channel_url
               FROM orderitems oi
               JOIN orders o ON oi.order_id = o.order_id
               JOIN products p ON oi.product_id = p.product_id
               JOIN verifiedchannels vc ON p.channel_id = vc.channel_id
               WHERE DATE_TRUNC('minute', oi.post_time::timestamp) = DATE_TRUNC('minute', $1::timestamp)
                 AND o.status = 'completed'""", last_day
        )

        for record in results_now:
            seller_message = (
                f"üìä <b>–í—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?</b>\n\n"
                f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> <a href='{record['channel_url']}'>{record['channel_name']}</a>\n"
                f"üïí <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {record['post_time']}\n\n"
                f"–í—ã–ø–æ–ª–Ω–∏–ª–∏ –ª–∏ –≤—ã —Å–≤–æ–∏ —É—Å–ª–æ–≤–∏—è?"
            )

            seller_keyboard = InlineKeyboardMarkup(row_width=2)
            seller_keyboard.add(
                InlineKeyboardButton("‚úÖ–í—ã–ø–æ–ª–Ω–∏–ª", callback_data=f"completed_seller_{record['order_id']}"),
                InlineKeyboardButton("‚ùå–ù–µ –≤—ã–ø–æ–ª–Ω–∏–ª", callback_data=f"not_completed_seller_{record['order_id']}")
            )

            await bot.send_message(
                chat_id=record['seller_id'],
                text=seller_message,
                reply_markup=seller_keyboard,
                parse_mode="HTML"
            )

            buyer_message = (
                f"üì¢ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —Ä–µ–∫–ª–∞–º—É?</b>\n\n"
                f"üìä <b>–ö–∞–Ω–∞–ª:</b> <a href='{record['channel_url']}'>{record['channel_name']}</a>\n"
                f"üïí <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {record['post_time']}\n\n"
                f"–í—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü —Å–≤–æ–∏ —É—Å–ª–æ–≤–∏—è?"
            )

            buyer_keyboard = InlineKeyboardMarkup(row_width=2)
            buyer_keyboard.add(
                InlineKeyboardButton("‚úÖ–í—ã–ø–æ–ª–Ω–∏–ª", callback_data=f"completed_buyer_{record['order_id']}"),
                InlineKeyboardButton("‚ùå–ù–µ –≤—ã–ø–æ–ª–Ω–∏–ª", callback_data=f"not_completed_buyer_{record['order_id']}")
            )

            await bot.send_message(
                chat_id=record['buyer_id'],
                text=buyer_message,
                reply_markup=buyer_keyboard,
                parse_mode="HTML"
            )

@dp.callback_query_handler(lambda query: query.data.startswith('completed_seller_'))
async def process_completion_seller(callback_query: types.CallbackQuery):
    order_id = callback_query.data.split('_')[2]
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}.",
        parse_mode="HTML"
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda query: query.data.startswith('not_completed_seller_'))
async def process_not_completion_seller(callback_query: types.CallbackQuery):
    order_id = callback_query.data.split('_')[2]
    pass

class ConfirmationRequest(BaseModel):
    user_id: int
    order_id: Union[int, None] = None
    price: int
    channel_name: str

@app.post('/confirmation')
async def handle_buy(data: ConfirmationRequest):
    print(data)
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text_message = (
            f"‚úÖ *–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!*\n\n"
            f"üí∞ *–¶–µ–Ω–∞:* `{nano_ton_to_ton(data.price)} Ton`\n"
            f"üì¢ *–ö–∞–Ω–∞–ª:* `{data.channel_name}`\n"
            f"üí≥ *–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω! üéâ*\n"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(data.user_id, text_message, parse_mode=ParseMode.MARKDOWN)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {"status": "success", "message": "Message sent to seller",}

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def start_fastapi():
    config = Config(app=app, host="0.0.0.0", port=5001, log_level="info")
    server = Server(config)
    await server.serve()

async def start_bot():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è executor.start_polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    async def main():
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await create_db_pool()

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ FastAPI –∏ Aiogram
        await asyncio.gather(
            start_fastapi(),  # –ó–∞–ø—É—Å–∫ FastAPI
            start_bot()       # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        )

    asyncio.run(main())


